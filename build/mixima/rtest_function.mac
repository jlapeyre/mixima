/* endex */

(sm(s) := smmatomax(s),kill(a,b,f), 0);
0$

/* translator, parser maybe fails to get this one. */

Function(((Slot(1)^2)+(Slot(2)^4)))(x,y);
y^4+x^2$

sm("
   f = (3 + #) & ; {f[a], f[b]}
   ");
[a + 3, b + 3]$


/* ex ok  Function  */
/* mma  f=(3 +#)&;{f[a],f[b]} */
((f=>Function((3+Slot(1)))),[f(a),f(b)]);
[a+3,b+3] ; 
/* endex */


/* ex ok  Function  */
/* mma  (g[#,#^2]&) /@ {x,y,z} */
Map(Function(g(Slot(1),(Slot(1)^2))),[x,y,z]);
[g(x,x^2),g(y,y^2),g(z,z^2)] ;
/* cm parser has precedence wrong. parens are absent in original */
/* endex */

/* ex ok  Function  */
/* mma  Select[{1,-1,2,-2,3},#>0 &] */
Select([1,-1,2,-2,3],Function((Slot(1)>0)));
[1,2,3] ; 
/* endex */

/* ex ok  Function  */
/* mma  Array[1 +#^2 &,10] */
Array(Function((1+(Slot(1)^2))),10);
[2,5,10,17,26,37,50,65,82,101] ; 
/* endex */

/* ex ok  Function  */
/* mma  Sort[ { {a,2}, {c,1}, {d,3} }, #1[[2]] < #2[[2]] & ] */
Sort([[a,2],[c,1],[d,3]],Function((Part(Slot(1),2)<Part(Slot(2),2))));
[[c,1],[a,2],[d,3]] ; 
/* endex */

/* ex ok  Function  */
/* mma  f1=f[##]& */
(f1=>Function(f(SlotSequence(1))));
lambda([[mixima_lambda_args]], mix_splice([1], f(SlotHold(1))))$
/* endex */


/* ex ok  Function  */
/* mma  f1[a,b,c,d] */
f1(a,b,c,d);
f(a,b,c,d) ; 
/* endex */

/* ex ok  Function  */
/* mma  f2=f[##2]& */
(f2=>Function(f(SlotSequence(2))));
lambda([[mixima_lambda_args]], mix_splice([1], f(SlotHold(2))))$
/* endex */

/* ex ok  Function  */
/* mma  f2[a,b,c,d] */
f2(a,b,c,d);
f(b,c,d) ; 
/* endex */

/* ex ok  Function  */
/* mma  f3=f[##1,X,##2,Y,##3,Z,##4]& */
(f3=>Function(f(SlotSequence(1),X,SlotSequence(2),Y,SlotSequence(3),Z,SlotSequence(4))));
lambda([[mixima_lambda_args]], mix_splice([1, 3, 5, 7], 
               f(SlotHold(1), X, SlotHold(2), Y, SlotHold(3), Z, SlotHold(4))))$
/* endex */

/* ex ok  Function  */
/* mma  f3[a,b,c,d] */
f3(a,b,c,d);
f(a,b,c,d,X,b,c,d,Y,c,d,Z,d) ; 
/* endex */

/* ex ok  Function  */
/* mma  cplus = Plus @@ # & */
(cplus=>Function(Apply("+",Slot(1))));
lambda([[mixima_lambda_args]],Apply("+",mix_nth(1,mixima_lambda_args))) ; 
/* endex */

/* ex ok  Function  */
/* mma  cplus[{a,b,c}] */
cplus([a,b,c]);
c+b+a ; 
/* endex */

/* ex ok  Function  */
/* mma  (17 &) /@ {1,2,3} */
Map(Function(17),[1,2,3]);
[17,17,17] ; 
/* endex */

/* ex ok  Function  */
/* mma  fpq = (((p + #) & )  /. p -> q) */
(fpq=>ReplaceAll(Function((p+Slot(1))),Rule(p,q)));
lambda([[mixima_lambda_args]],q+mix_nth(1,mixima_lambda_args)) ; 
/* endex */

/* ex ok  Function  */
/* mma  fpq[x] */
fpq(x);
x+q ; 
/* endex */

/* ex ok  Function  */
/* mma  f3=(#+#+#)& */
(f3=>Function((Slot(1)+Slot(1)+Slot(1))));
lambda([[mixima_lambda_args]],
       mix_nth(1,mixima_lambda_args)+mix_nth(1,mixima_lambda_args)
                                    +mix_nth(1,mixima_lambda_args)) ; 
/* endex */

/* ex ok  Function  */
/* mma  f3[a] */
f3(a);
3*a ; 
/* endex */

kill(f,f1,f2,f3,cplus,fpq);
done$

/* ex ok  Function  */
/* mma  Map[f[#] + g[#] &, {a,b,c} ] */
Map(Function((f(Slot(1))+g(Slot(1)))),[a,b,c]);
[g(a)+f(a),g(b)+f(b),g(c)+f(c)] ; 
/* endex */

/* ex ok  Function  */
/* mma  Map[Take[#,2]&,{{2,1,7},{4,1,5},{3,1,2}}] */
Map(Function(Take(Slot(1),2)),[[2,1,7],[4,1,5],[3,1,2]]);
[[2,1],[4,1],[3,1]] ; 
/* endex */

/* ex ok  Function  */
/* mma  Apply[f[##,##]&,{x,y}] */
Apply(Function(f(SlotSequence(1),SlotSequence(1))),[x,y]);
f(x,y,x,y) ; 
/* endex */

/* fails
Apply[f[##2, #1] &, {{a, b, c}, {ap, bp}}, {1}]
*/

/* ex ok  Function  */
/* mma  pairs=Map[{Re[#],Im[#]}&,{I,1 +I,2 +3 I}] */
(pairs=>Map(Function([Re(Slot(1)),Im(Slot(1))]),[%i,(1+%i),(2+(3*%i))]));
[[0,1],[1,1],[2,3]] ; 
/* endex */

/* ex ok  Function  */
/* mma  Map[#[[[1]]]+I#[[[2]]]&,pairs] */
Map(Function((Part(Slot(1),1)+(%i*Part(Slot(1),2)))),pairs);
[%i,%i+1,3*%i+2] ; 
/* endex */

/* ex ok  Function  */
Function([u, v], u^2 + v^4)(x, y);
y^4+x^2$
/* cm named arguments */
/* endex */

/* ex ok  Function  */
Function([u], 3 + u)(x);
x+3$
/* endex */

/* ex ok  Function  */
Function(u, 3 + u)(x);
x+3$
/* endex */

/* ex ok  Function  */
/* mma Evaluate[ Apply[Table[c, ##]&, Map[List, {2,2}]] ] */
Evaluate(Apply(Function(Table(c,SlotSequence(1))),Map(List,[2,2])));
[[c, c], [c, c]]$
/* cm In Mma, the Evaluate is not necessary. */
/* endex */

smmatomax(" Evaluate[ Apply[Table[c, ##]&, Map[List, {2,2}]] ] ");
[[c, c], [c, c]]$

/* ex ok  Function  */
/* mma fromdigits[digits_] := Fold[(10 #1 + #2) &, 0, digits] */
(fromdigits(digits):=Fold(Function(((10*Slot(1))+Slot(2))),0,digits),0);
0$
/* endex */

/* ex ok  Function  */
/* mma fromdigits[Reverse[Range[10]]] */
fromdigits(Reverse(Range(10)));
10987654321$
/* endex */

kill(f,f1,f2,f3,cplus,fpq,pairs,fromdigits);
done$

