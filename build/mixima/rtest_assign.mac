/* Maybe don't use the assignment operator here ... */

kill(x,z,m,cat,zebra,gg,ff,a,b,c,e,fish);
done$

/* ordinary assignment */
x => 1;
1$

x;
1$

/* ordinary assignment */
z[1] => 3;
3$

z[1];
3$

/* maxima assignment to part of a list (seen as an array ?) */
(m : [1,2,3,4,5], m[4] : cat);
cat$

m;
[1, 2, 3, cat, 5] $

/* lisp function mSetQ sees the '$inpart and does substinpart and copies the result to m */
inpart(m,4) => zebra;
zebra$

m;
[1,2,3,zebra,5]$

gg : ff(a,b,c,e);
ff(a,b,c,e)$

/* same as previous example. mSetQ never looked to see that the op was ff in one case and mlist in the other */
inpart(gg,4) => zebra;
zebra$

gg;
ff(a,b,c,zebra)$

/* maxima assignment */
gg[4] : fish;
fish$

gg[4];
fish$

/* this object has nothing to do with gg[4] */
gg;
ff(a,b,c,zebra)$

(kill(x), e : (1+x)/2, part(e,1) => z , e);
z/2$

(kill(x), e : (1+x)/2, inpart(e,1) => z , e);
(x+1)*z$

/* fixed bug in part multilevel part spec */
(kill(qq,e), e : (1 + x + 7*(a-b))/4, part(e,1,2,2,1) => qq);
qq$

e;
(x+7*(qq-b)+1)/4$

(kill(qq,e), e : (1 + x + 7*(a-b))/4, inpart(e,2,2,2,1) => qq);
qq;

e;
(x+7*(qq-b)+1)/4$

/*
   test for bug fix: here part spec specifies part that does not exist
   mma would trap the error and return qq
*/
(kill(qq,e), e : (1 + x + 7*(a-b))/4, errcatch(inpart(e,2,2,2,1,2) => qq));
[]$


/* e is unchanged */
e;
(x+7*(a-b)+1)/4$

(kill(qq,e), e : (1 + x + 7*(a-b))/4, errcatch(part(e,2,2,2,1,2) => qq));
[]$

e;
(x+7*(a-b)+1)/4$


kill(x,z,m,cat,zebra,gg,ff,a,b,c,e,qq,fish);
done$
