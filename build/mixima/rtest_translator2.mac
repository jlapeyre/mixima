/* test reading mma code from a string, translating to maxima, and evaluting. */

(sm(s) := smmatomax(s),kill(a,b,c,m,z,f,i), 0);
0$

/* start tests */

/************************************
 * Function definition
 */
 
sm("f[x_] := x");
f(x) := x$

/* Call with symbol */
sm("f[a]");
a$

(kill(f));
done$

/* Two arguments */
sm("f[x_,y_] := x * y;");
f(x, y) := x * y$

sm("f[a,b]");
a*b;

(kill(f));
done$

/* list arguments */
sm("f[x__] := Apply[Plus,x]");
f([x]) := apply(Apply, append(["+"], [x]))$

sm("f[1,2,3,4,5]");
15$

sm("f[a,b,c]");
a+b+c$

/* one scalar and one list argument (or whatever the words for this are) */
sm("f[y_,x__] := y * Apply[Plus,x]");
(f(y,[x]):=(y*apply(Apply,append(["+"],[x]))))$

sm("f[z,a,b,c]");
(c+b+a)*z$

kill(f);
done$

/************************************************
 * For loops
 */
/* Following don't test difference betwen pre and post. but they give the correct result */
/* For with post increment */
kill(i);
done$

sm("cum=0; For[i=1, i < 11, i++, cum = cum + i]; cum");
55$

/* For with pre increment */
sm("cum=0; For[i=1, i < 11, ++i, cum = cum + i]; cum");
55$

/* For with post decrement */
sm("cum=0; For[i=10, i > 0, i--, cum = cum + i]; cum");
55$

/* For with pre decrement */
sm("cum=0; For[i=10, i > 0, --i, cum = cum + i]; cum");
55$

kill(cum);
done$

/* Check loop variable. In maxima it is localized. In Mma not */
i;
0$

kill(i);
done$

/****************************************************
 * Anonymous functions
 */
 
sm( " Map[ #^2 &, {a,b,c}] " );
[a^2,b^2,c^2]$

/* No, this is not the way Mma map works. Rewrote Map to be closer to correct.
sm("Map[ #1^2 + #2^2 &, {a,b,c},{x,y,z}]");
[x^2+a^2,y^2+b^2,z^2+c^2]$
*/

/****************************************************
 * Assignment, including to parts
*/

(kill(a,b,c), sm(" a  =  1 "));
1$

a;
1;

(kill(m,a,b,c), sm(" m = {a,b,c} ") );
[a, b, c]$

m;
[a, b, c]$

sm(" m[[2]] ");
b$

(kill(z),sm(" m[[2]] = z "));
z$

m;
[a, z, c]$

sm(" g = f[a,b,c]  ");
f(a,b,c)$

sm(" g[[2]] ");
b$

sm(" g[[2]] = z ");
z$

g;
f(a, z, c)$

/* tries a maxima array */
(kill(a), sm(" a[0] = 1 "));
1;

/* The assignment function actually got maxima a(0), and changed it to maxima a[0] */
a[0];
1;

/* But at present, there is no way to know this is not a function call a(0).
   This is the expected result, but its not what we want.
*/
sm(" a[0] ");
a(0)$

/* Block requires 2 args */
sm(" Block[] ");
Block()$

sm(" With[] ");
With()$

sm(" Module[] ");
Module()$

/* Block requires 2 args */
sm(" Block[{x}] ");
Block([x])$

sm(" Block[{x},x] ");
x;

smmatomax(" Block[{x=1},x] ");
1;

/*****************************************************
 *
 *        Following is a session in Mma 3.0

  In[1]:= Block[ {a[0]=1}, a[0] ]

  Block::lvset: Local variable specification {a[0] = 1} contains a[0] = 1
       which is an assignment to a[0]; only assignments to symbols are allowed.

  Out[1]= Block[{a[0] = 1}, a[0]]

  In[2]:= Module[ {a[0]=1}, a[0] ]

  Module::lvset: Local variable specification {a[0] = 1} contains a[0] = 1
       which is an assignment to a[0]; only assignments to symbols are allowed.

  Out[2]= Module[{a[0] = 1}, a[0]]

  In our case lisp function mbind also catches this. But we get false rather than the
  unevaluated form. We leave it at that for now
  
 (%i4) smmatomax( " Block[ { a[0] = 1 }, a[0] ] ");

  Only symbols can be bound; found: a(0)
 (%o4) false
 (%i5) smmatomax( " Module[ { a[0] = 1 }, a[0] ] ");

 Only symbols can be bound; found: a(0)
 (%o5) false

*
***************************************/

sm( " Block[ { a[0] = 1 }, a[0] ] " );
false$

sm( " Module[ { a[0] = 1 }, a[0] ] " );
false$


/* Not a translator test. Test Block catching Return from For */
(kill(i) , Block( [],
  (For(i:1,i<5,i:i+1,if i>2 then Return(i)),
  i:77)));
3$



/* broken with  i = i - 1 
For[i=10, i > 0, i = i - 1, cum = cum + i]; cum");
*/

/*
sm("");

sm("");

sm("");

sm("");

sm("");
*/

/**************************************/

/* done with tests. clean up */
(kill(sm,m,a,b,c,f,g,i,z),0);
0$






