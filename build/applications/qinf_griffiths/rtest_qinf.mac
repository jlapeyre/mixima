/* Test translation of Griffiths' QI code from Mma to Macsyma */

/* Don't know if these are broken. Need good examples
  entang, entsq, expandout2, fouriern, ketcofs (probably broken)
  ketinnerc

  partially broken: (see below) grschmr


*/

/* Pauli matrices */

sig[0];
[[1,0],[0,1]];

sig[1];
[[0,1],[1,0]];

/* In[11]:= sig[2]
Out[11]= {{0, -I}, {I, 0}} */
sig[2];
[[0,-%i],[%i,0]];

sig[3];
[[1,0],[0,-1]];

/* Tensor 2 identities after the pauli y matrix 
In[13]:= InputForm[addidents[sig[2],2]]

Out[13]//InputForm=
  {{0, 0, 0, 0, -I, 0, 0, 0}, {0, 0, 0, 0, 0, -I, 0, 0},
   {0, 0, 0, 0, 0, 0, -I, 0}, {0, 0, 0, 0, 0, 0, 0, -I},
   {I, 0, 0, 0, 0, 0, 0, 0}, {0, I, 0, 0, 0, 0, 0, 0},
   {0, 0, I, 0, 0, 0, 0, 0}, {0, 0, 0, I, 0, 0, 0, 0}}  */
addidents(sig[2],2);
[[0,0,0,0,-%i,0,0,0],[0,0,0,0,0,-%i,0,0],[0,0,0,0,0,0,-%i,0],
        [0,0,0,0,0,0,0,-%i],[%i,0,0,0,0,0,0,0],[0,%i,0,0,0,0,0,0],
        [0,0,%i,0,0,0,0,0],[0,0,0,%i,0,0,0,0]];

/* A larger one. Much, much faster in Mma (0.025 s) than in Macsyma (1.93 s)
 InputForm[Dimensions[addidents[sig[3],6]]]
  {128, 128}  */
Dimensions(addidents(sig[3],6));
[128,128];


mma_user_adjoint( [ [a,b,c], [d,%i*e,f],[%i,h,i]] );
[[a,d,-%i],[b,-%i*e,h],[c,f,i]];


mma_user_adjoint(mma_user_adjoint( [ [a,b,c], [d,%i*e,f],[%i,h,i]] )) - [ [a,b,c], [d,%i*e,f],[%i,h,i]];
[[0,0,0],[0,0,0],[0,0,0]];

/* This test works, but does not mean much, because ComplexExpand is not implemented */
adjointc( [ [0,1], [1,2]]);
ComplexExpand([[0,1],[1,2]]);

/* Transpose of real matrix */
adjointr([ [0,1], [2,3]]);
[[0,2],[1,3]];

/* One of the two definitions of Bell states in the code. */
bell[0];
[1/sqrt(2),0,0,1/sqrt(2)];

bell[1];
[1/sqrt(2),0,0,-1/sqrt(2)];

bell[2];
[0,1/sqrt(2),1/sqrt(2),0];

bell[3];
[0,1/sqrt(2),-1/sqrt(2),0];

/* Check orthonormality */
Table(bell[i].bell[j], [i,0,3], [j,0,3]);
[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];


/* This is not the expected result. In the file. bellbas is
assigned before mma_user_transpose is defined. The original Mma
code gets it right somehow. If you load the code to the qinf function
definitions twice, then this will be defined correctly  */

/*  fix this somehow...
bellbas;
mma_user_transpose([[1/sqrt(2),0,0,1/sqrt(2)],
                           [1/sqrt(2),0,0,-1/sqrt(2)],
                           [0,1/sqrt(2),1/sqrt(2),0],
                           [0,1/sqrt(2),-1/sqrt(2),0]]);
*/


/* However, defining them now works */
bellbas:mma_user_transpose(Table(bell[j],[j,0,3]));
[[1/sqrt(2),1/sqrt(2),0,0],[0,0,1/sqrt(2),1/sqrt(2)],
        [0,0,1/sqrt(2),-1/sqrt(2)],[1/sqrt(2),-1/sqrt(2),0,0]];

basbell:mma_user_adjoint(bellbas);
[[1/sqrt(2),0,0,1/sqrt(2)],[1/sqrt(2),0,0,-1/sqrt(2)],
        [0,1/sqrt(2),1/sqrt(2),0],[0,1/sqrt(2),-1/sqrt(2),0]];

/*
 I need to sort out matrix multiplication. Macsyma, does not
 treat two-dimensional lists as matrices. So this one will not
 work.
bell2mat(mat):=Dot(bellbas,mat,basbell);
*/

/* These are two examples from the doc for bin2ket */
bin2ket([0,1]);
[0,1,0,0];

/*
In[20]:= c*bin2ket[{0,1}]+d*bin2ket[{1,1}]
Out[20]= {0, c, 0, d} */
c*bin2ket([0,1]) + d*bin2ket([1,1]);
[0,c,0,d];

/* These two example from docs also work as expected */
bket(01,2);
[0,1,0,0];

bket(010,3);
[0,0,1,0,0,0,0,0];

/* Some of the answers look strange */
/*In[2]:= blochket[{0,0,1}]
Out[2]= {1, 0} */

blochket([0,0,1]);
[1,0];

/*
In[4]:= InputForm[blochket[{Cos[phi],Sin[phi],Cos[theta]}]]
  {Cos[ArcCos[Cos[theta]]/2], E^(I*ArcTan[Cos[phi], Sin[phi]])*
    Sin[ArcCos[Cos[theta]]/2]}
*/
blochket([cos(phi),sin(phi),cos(theta)]);
[cos(acos(cos(theta))/2),
        %e^(%i*atan2(cos(phi),sin(phi)))*sin(acos(cos(theta))/2)];

/* In[9]:= cgate[sig[2]]
Out[9]= {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 0, -I}, {0, 0, I, 0}} */
cgate(sig[2]);
[[1,0,0,0],[0,1,0,0],[0,0,0,-%i],[0,0,%i,0]];

/* These usages strings are just a quick hack. The
 batch test has trouble checking this.
cnot_usage;
"returns controlled-not gate on 2 qubits, with\
first qubit the control";
*/

cnot;
[[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]];

/* check that cnot is controlled sigma_x gate */
cgate(sig[1]) - cnot;
[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];


coeffs(bellbas,bellbas);
[[1/2,1/2,1/2,1/2],[1/2,-1/2,1/2,-1/2],[-1/2,1/2,1/2,-1/2],
         [1/2,1/2,-1/2,-1/2]];


copygate(sig[0],3) - IdentityMatrix(8);
[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]];

copygate(sig[2],2);
[[0,0,0,-1],[0,0,1,0],[0,1,0,0],[-1,0,0,0]];

/* takes a while, but doesnt crash */
/* Macsyma: 8.85s, Mma: 0.095s; 100 times slower */
Dimensions(copygate(sig[2],8));
[256,256];

cphase;
[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,-1]];

/* Check that cphase is correct */
cgate(sig[3]) - cphase;
[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];

diags(IdentityMatrix(8));
[1,1,1,1,1,1,1,1];

dyad([0,1],[0,1]);
[[0,0],[0,1]];

/* ComplexExpand not done yet */
dyadc([0,%i],[0,1]);
[0,%i*ComplexExpand([0,1])];

dyadr([0,1],[0,1]);
[[0,0],[0,1]];

dyap([0,1]);
[[0,0],[0,1]];

/* entang() appears not to work, but I am not sure what a reasonable example
  is */

Chop(entropy([.5,.4,.1]) - 1.360964047443681);
0;

entropy([1]);
0;

exchg;
[[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]];


fourierg(4);
[[1/2,1/2,1/2,1/2],[1/2,%i/2,-1/2,-%i/2],[1/2,-1/2,1/2,-1/2],
        [1/2,-%i/2,-1/2,%i/2]];

invertlist(10,[3,5,7]);
[1,2,4,6,8,9,10];

/* grschmr fails with some whole numbers because ensuremat gets called with vecors 
     and matrix() wants a matrix. Need to find out why and fix it. */
grschmr( [[0,1],[1,0]]);
[[0,1],[1,0]];

Chop(grschmr( [ [1.0,1.0],[.5,.1]]) - [[0.70710678118655,0.70710678118655],
         [0.70710678118655,-0.70710678118655]]);
[[0,0],[0,0]];

hgate;
[[1/sqrt(2),1/sqrt(2)],[1/sqrt(2),-1/sqrt(2)]];

/* This was renamed by the translator to avoid collision with  Macsyma ident */
mma_user_ident(2);
[[1,0],[0,1]];

invperm([2,6,5,3,1,4]);
[5,1,4,6,3,2];

invperm(invperm([2,6,5,3,1,4])) - [2,6,5,3,1,4];
[0,0,0,0,0,0];

/* works somewhat */
ketinner([0,1],[1,0]);
0;
ketinner([0,1],[0,1]);
1;

ketnorm([0,1]);
[0,1];

ketnorm([0,1/2]);
[0,1];

Chop(ketnorm([.5,.5]) - [0.70710678118655,0.70710678118655]);
[0,0];

ketnorm([1/2,1/2]);
[1/sqrt(2),1/sqrt(2)];


ketnormr([a,a]);
[a/(sqrt(2)*abs(a)),a/(sqrt(2)*abs(a))];

ketnormr([1,1]);
[1/sqrt(2),1/sqrt(2)];

/*In[8]:= InputForm[ketprod[{1/2,1/2},{0,1},{1,0}]]
  Out[8]//InputForm= {0, 0, 1/2, 0, 0, 0, 1/2, 0}
*/
ketprod([1/2,1/2],[0,1],[1,0]);
[0,0,1/2,0,0,0,1/2,0];

/* differs from example in doc, but I think the doc has a typo */
ket2bin([al,0,bt,2]);
[[al,"|00>"],[0,"|01>"],[bt,"|10>"],[2,"|11>"]];

ket2bin([a,b,c,d,e,f,g,h]);
[[a,"|000>"],[b,"|001>"],[c,"|010>"],[d,"|011>"],[e,"|100>"],
        [f,"|101>"],[g,"|110>"],[h,"|111>"]];

ket2kten([a,b,c,d,e,f],[3,2]);
[[a,b],[c,d],[e,f]];

ket2kten2([a,b,c,d,e,f,g,h]);
[[[a, b], [c, d]], [[e, f], [g, h]]];

/* following two should be idenitity on appropriate input */
kten2ket(ket2kten2([a,b,c,d,e,f,g,h]));
[a,b,c,d,e,f,g,h];

kten2ket(ket2kten([a,b,c,d,e,f],[3,2]));
[a,b,c,d,e,f];

/* fail. Dont have an example
mat2paul
*/

matinner([[a,b],[c,d]],[[e,f],[g,h]]);
d*h+c*g+b*f+a*e;

matinp([[a,b],[c,d]],[[e,f],[g,h]]);
d*h+b*g+c*f+a*e;

matinq([[a,b],[c,d]],[[e,f],[g,h]]);
d*h+c*g+b*f+a*e;

matnorm([[a,b],[c,d]]);
[[a/sqrt(b^2+a^2),b/sqrt(b^2+a^2)],[c/sqrt(d^2+c^2),d/sqrt(d^2+c^2)]];

mat2bell(Array(f,[4,4]));
[[(f(4,4)/sqrt(2)+f(1,4)/sqrt(2))/sqrt(2)
          +(f(4,1)/sqrt(2)+f(1,1)/sqrt(2))/sqrt(2),
         (f(4,1)/sqrt(2)+f(1,1)/sqrt(2))/sqrt(2)
          -(f(4,4)/sqrt(2)+f(1,4)/sqrt(2))/sqrt(2),
         (f(4,3)/sqrt(2)+f(1,3)/sqrt(2))/sqrt(2)
          +(f(4,2)/sqrt(2)+f(1,2)/sqrt(2))/sqrt(2),
         (f(4,2)/sqrt(2)+f(1,2)/sqrt(2))/sqrt(2)
          -(f(4,3)/sqrt(2)+f(1,3)/sqrt(2))/sqrt(2)],
        [(f(1,4)/sqrt(2)-f(4,4)/sqrt(2))/sqrt(2)
          +(f(1,1)/sqrt(2)-f(4,1)/sqrt(2))/sqrt(2),
         (f(1,1)/sqrt(2)-f(4,1)/sqrt(2))/sqrt(2)
          -(f(1,4)/sqrt(2)-f(4,4)/sqrt(2))/sqrt(2),
         (f(1,3)/sqrt(2)-f(4,3)/sqrt(2))/sqrt(2)
          +(f(1,2)/sqrt(2)-f(4,2)/sqrt(2))/sqrt(2),
         (f(1,2)/sqrt(2)-f(4,2)/sqrt(2))/sqrt(2)
          -(f(1,3)/sqrt(2)-f(4,3)/sqrt(2))/sqrt(2)],
        [(f(3,4)/sqrt(2)+f(2,4)/sqrt(2))/sqrt(2)
          +(f(3,1)/sqrt(2)+f(2,1)/sqrt(2))/sqrt(2),
         (f(3,1)/sqrt(2)+f(2,1)/sqrt(2))/sqrt(2)
          -(f(3,4)/sqrt(2)+f(2,4)/sqrt(2))/sqrt(2),
         (f(3,3)/sqrt(2)+f(2,3)/sqrt(2))/sqrt(2)
          +(f(3,2)/sqrt(2)+f(2,2)/sqrt(2))/sqrt(2),
         (f(3,2)/sqrt(2)+f(2,2)/sqrt(2))/sqrt(2)
          -(f(3,3)/sqrt(2)+f(2,3)/sqrt(2))/sqrt(2)],
        [(f(2,4)/sqrt(2)-f(3,4)/sqrt(2))/sqrt(2)
          +(f(2,1)/sqrt(2)-f(3,1)/sqrt(2))/sqrt(2),
         (f(2,1)/sqrt(2)-f(3,1)/sqrt(2))/sqrt(2)
          -(f(2,4)/sqrt(2)-f(3,4)/sqrt(2))/sqrt(2),
         (f(2,3)/sqrt(2)-f(3,3)/sqrt(2))/sqrt(2)
          +(f(2,2)/sqrt(2)-f(3,2)/sqrt(2))/sqrt(2),
         (f(2,2)/sqrt(2)-f(3,2)/sqrt(2))/sqrt(2)
          -(f(2,3)/sqrt(2)-f(3,3)/sqrt(2))/sqrt(2)]];


/* Need a decent test of this */
mat2nten([[a,b],[c,d]],[2]);
[[a,b],[c,d]];

mat2nten2([[a,b],[c,d]]);
[[a,b],[c,d]];

mat2oten([[a,b],[c,d]],[2]);
[[a,b],[c,d]];

mat2oten2([[a,b],[c,d]]);
[[a,b],[c,d]];


mat2paul([[a,b],[c,d]]);
[(d+a)/2,(c+b)/2,(%i*b-%i*c)/2,(a-d)/2];

/* appears to work, but i dont want to put all the output here
mat2sbell(Array(f,[4,4]));
*/

/* should be inverse, but I need better tests */
nten2mat(mat2nten2([[a,b],[c,d]]));
[[a,b],[c,d]];

/* need a real test */
nten2oten([[a,b],[c,d]]);
[[a,b],[c,d]];

oten2mat([[a,b],[c,d]]);
[[a,b],[c,d]];

oten2nten([[a,b],[c,d]]);
[[a,b],[c,d]];

/* fails
oten2paul([[a,b],[c,d]]);
*/

outer([[a,b],[c,d]],[[a,b],[c,d]]);
[[[[a^2,a*b],[a*c,a*d]],[[a*b,b^2],[b*c,b*d]]],
        [[[a*c,b*c],[c^2,c*d]],[[a*d,b*d],[c*d,d^2]]]];

/* fails, or maybe I don't know how to use them yet
 But some of these are used in misc10 code
partrace
partrace2
partrans
partrans2
paul2mat
paul2oten
paulnz
paulnzch
*/

paulten(1,0,3);
[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
[[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]];

/* to test 
 permket
 permket2
 permmat
 permat2

*/

/* from doc */
permptrace(3,2);
[3, 4, 1, 2, 5, 6];

/* from doc */
permno(5);
[1, 3, 5, 7, 9, 2, 4, 6, 8, 10];

/* from doc */
permon(5);
[1, 6, 2, 7, 3, 8, 4, 9, 5, 10];

/* agrees with Mma */
permtrans(4,4);
[1, 2, 3, 4, 5, 6, 8, 7];

permute([a,b,c],[2,3,1]);
[c, a, b];

permutmat([2,3,1]);
[[0,0,1],[1,0,0],[0,1,0]];

/*
In[15]:= plabc[{1,2,3}]
Out[15]=   c[1,2,3]= 
*/
plabc([1,2,3]);
"  c[1,2,3]= ";

pop2dop([[1,2],[3,4]]);
[[1/5,2/5],[3/5,4/5]];

Tr(pop2dop([[1,2],[3,4]]));
1;

prodlist([a,b,c,d]);
a*b*c*d;


quadn([1,2,3,4,5]);
55;

quadn([[1,2],[1,2]]);
10;

quadr([[1,2],[1,2]]);
10;

quadn([[1,2+%i],[1,2]]);
11;

/* broken it seems.
 not really broken. need to learn how to simplify complex fractions
ranbas(2);
ranket(2);
*/

/* seems to work, but i cant test it easily
ranketr
ranbasr(2);
*/

/* sigl.  The construction in mma does not work properly in macsyma.
 this is fixable by hand. then
  sigprod will work
*/

/* sumlist faithfully reproduces the Mma, but it has an error,
 with ls --> list */

/* agrees with mma */
tenprod([[a,b],[c,d]],[[e,f],[g,h]],[[i,j],[k,l]]);
[[a*e*i,a*e*j,a*f*i,a*f*j,b*e*i,b*e*j,b*f*i,b*f*j],
        [a*e*k,8*a*e,a*f*k,8*a*f,b*e*k,8*b*e,b*f*k,8*b*f],
        [a*g*i,a*g*j,a*h*i,a*h*j,b*g*i,b*g*j,b*h*i,b*h*j],
        [a*g*k,8*a*g,a*h*k,8*a*h,b*g*k,8*b*g,b*h*k,8*b*h],
        [c*e*i,c*e*j,c*f*i,c*f*j,d*e*i,d*e*j,d*f*i,d*f*j],
        [c*e*k,8*c*e,c*f*k,8*c*f,d*e*k,8*d*e,d*f*k,8*d*f],
        [c*g*i,c*g*j,c*h*i,c*h*j,d*g*i,d*g*j,d*h*i,d*h*j],
        [c*g*k,8*c*g,c*h*k,8*c*h,d*g*k,8*d*g,d*h*k,8*d*h]];

/* traceout may or may not work. may be a problem with Rest ? 
  need to do rtests on Rest.
*/

/* agrees with mma */
traceout2(tenprod([[a,b],[c,d]],[[e,f],[g,h]],[[i,j],[k,l]]),[1,2]);
[[d*h*i+a*h*i+d*e*i+a*e*i,d*h*j+a*h*j+d*e*j+a*e*j],
        [d*h*k+a*h*k+d*e*k+a*e*k,8*d*h+8*a*h+8*d*e+8*a*e]];




