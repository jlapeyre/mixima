
(kill(sm),sm(s) := smmatomax(s),kill(m,a,b,c,f,g,i,z,bin2KET,bket,blochket,diags),0);
0$

/*
 *  Here is a bit of user code.  Hope to find and fix the bug with the case bin2ket -> bin2KET

   bin2ket::usage = "bin2ket[ls] takes list ls of n 0's and 1's,
    thought of as basis states of n qubits, and returns the corresponding ket in a
    2^n dimensional Hilbert space. E.g. bin2ket[{0,1}] -> {0,1,0,0}.  One can
    multiply by coefficients, and add if the number of qubits is the
    same. c*bin2ket[{0,1}] + d*bin2ket[{1,1}] -> {0,c,0,d}.  Also see bket[]."

*/
(sm( "
  
    bin2ket[ls_] :=
      Module[{ket, ln = Length[ls], m},
        ket = Table[0, {2^ln}]; m = 1 + Fold[2*#1 + #2 & , 0, ls]; ++ket[[m]]; ket]

"),0);
0$

/* should put this back in. the translator has changed so this does not match anymore
bin2KET(ls):=Module([ket,ln => Length(ls),m],
               (ket => Table(0,[2^ln]),
                m => 1+Fold(lambda([[lambda_args]],
                                   2*lambda_args[1]+lambda_args[2]),0,ls),
                PreIncrement(Part(ket,m)),ket))$
 */

bin2KET([0,0,0]);
[1,0,0,0,0,0,0,0]$

bin2KET([1,1,1]);
[0,0,0,0,0,0,0,1]$

bin2KET([1,0,1]);
[0,0,0,0,0,1,0,0]$

 /*
 
   bket[bin,n]. Returns stadard form of basis ket
   corresponding to |bin>, where 'bin' is a string of n 0's or 1's. E.g.,
   bket[01,2]={0,1,0,0}; bket[010,3]={0,0,1,0,0,0,0,0}. Also see bin2ket"
     bket:comment. Due to difficulty in getting Mca to interpret
  '000' as different from '0', this function adds 2*10^n to the n-bit 'bin'
  and converts the result to a string, which is then converted back to a list 
  by Characters[] followed by ToExpression.  Finally, the 2 is discarded using 
  Take[], and the result converted to the corresponding binary number using
  Fold[]. Adding 1 to the result yields m, the position where the list
   representing the starndard ket is changed from 0 to 1.
*/

(sm( "
  
bket[bin_, n_] :=
  Module[{lst = Table[0, {2^n}], m},
   m = 1 + Fold[2*#1 + #2 & , 0,
       Take[ToExpression[Characters[ToString[2*10^n + bin]]], -n]];
    lst[[m]] = 1; lst]

"),0);
0$

/* translation has changed
bket(bin,n):=Module([lst => Table(0,[2^n]),m],
            (m => 1+Fold(lambda([[lambda_args]],
                                2*lambda_args[1]+lambda_args[2]),0,
                         Take(ToExpression(Characters(ToString(2*10^n+bin))),
                              (-1)*n)),Part(lst,m) => 1,lst))$
*/                      

bket(01,2);
[0,1,0,0]$

bket(010,3);
[0,0,1,0,0,0,0,0]$

sm("
  
 blochket[ls_] :=
   Module[{theta, phi, x = ls[[1]], y = ls[[2]], z = ls[[3]]},
    theta = ArcCos[z]; If[0 == x && 0 == y || 0. == x && 0. == y, phi = 0,
      phi = ArcTan[x, y], phi = ArcTan[x, y]];
     {Cos[theta/2], Sin[theta/2]*E^(I*phi)}]

");

/*

 blochket[{x,y,z}] takes the Cartesian
 coordinates of a point on the Bloch sphere and returns the corresponding ket in
 the form {cos(th/2),sin(th/2)e^i*phi}

*/

/*  Translator uses maxima if statement here
blochket(ls):=Module(
                [theta,phi,x => Part(ls,1),y => Part(ls,2),
                 z => Part(ls,3)],
                (theta => ArcCos(z),
                 if maybe(0 = x and 0 = y or 0.0 = x and 0.0 = y) = true
                     then phi => 0
                     elseif maybe(0 = x and 0 = y or 0.0 = x and 0.0 = y)
                      = false then phi => ArcTan(x,y) else phi => ArcTan(x,y),
                 [Cos(theta*1/2),Sin(theta*1/2)*%e^(%i*phi)]))$
*/             

/*  Translator uses If() function here */
blochket(ls):=Module(
               [theta,phi,x => Part(ls,1),y => Part(ls,2),z => Part(ls,3)],
               (theta => ArcCos(z),
                If(0 = x and 0 = y or 0.0 = x and 0.0 = y,phi => 0,
                   phi => ArcTan(x,y),phi => ArcTan(x,y)),
                [Cos(theta*1/2),Sin(theta*1/2)*%e^(%i*phi)]))$

blochket([0,0,1]);
[1,0]$

blochket([1,0,0]);
[1/sqrt(2),1/sqrt(2)]$

blochket([0,1,0]);
[1/sqrt(2),%i/sqrt(2)]$

(sm("
  
tenprod[args__]:=Module[{dim,las=List[args],na,pm},
na=Length[las]; pm = permon[na]; 
dim=prodlist[ Map[Last[Dimensions[#]]&,las] ];
                           Partition[  Flatten[ transpose[outer[args],pm] ] ,  dim  ]]

"),0);
0$

/*
tenprod([args]):=Module([dim,las => apply("[",append([args])),na,pm],
        (na => Length(las),pm => permon(na),
         dim => prodlist(Map(lambda([[lambda_args]],
                                    Last(Dimensions(lambda_args[1]))),las)),
         Partition(Flatten(mma_user_transpose(apply(outer,append([args])),
                                              pm)),dim)))$
*/

/*  diags::usage = "diags[M] takes a matrix M as a list of lists,
and extracts the diagonal elements as a single list."
	(*diags:comment.  This is the inverse to Mca DiagonalMatrix*)  */
(sm("
  
diags[mat_] := Module[{j,v=Table[0,{l=Length[mat]}]},
  v=Table[0,{l}]; For[j=1,j<=l,++j, v[[j]] = mat[[j,j]] ]; v]

"),0);
0$

diags(IdentityMatrix(10));
[1,1,1,1,1,1,1,1,1,1]$

sm("
  
diags[DiagonalMatrix[Range[20]]]

");
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]$

(sm("
  
  ketnorm[v_]:= v/Sqrt[Conjugate[v].v];

"),0);
0$

(sm("
  ketnormr[v_]:= v/Sqrt[v.v];
"),0);
0$

(sm("

grschm[ls_] := Module[{j, k, ln = Length[ls], ns = {}, v, w},
   For[j = 1, j <= ln, ++j, v = ls[[j]]; w = v;
      For[k = 1, k < j, ++k, w = w - ketinner[ns[[k]], v]*ns[[k]]; ];
      ns = Append[ns, ketnorm[w]]; ]; ns]
"),0);
0$

(sm("
  
grschmr[ls_] :=
  Module[{j, k, ln = Length[ls], ns = {}, v, w},
   For[j = 1, j <= ln, ++j, v = ls[[j]]; w = v;
      For[k = 1, k < j, ++k, w = w - ns[[k]] . v*ns[[k]]; ];
      ns = Append[ns, ketnormr[w]]; ]; ns]
"),0);

0$

/* not sure this is correct, but it agrees with what Mma gives */
ratsimp( grschmr( [[1,2,3],[9,18,30],[12,48,60]] ));

[[1/sqrt(14),2/sqrt(14),3/sqrt(14)],
        [-3/(sqrt(5)*sqrt(14)),-3*sqrt(14)/(7*sqrt(5)),sqrt(5)/sqrt(14)],
        [-2/sqrt(5),1/sqrt(5),0]]$

        

(kill(sm,m,a,b,c,f,g,i,z,bin2KET,bket,blochket,diags),0);
0$
