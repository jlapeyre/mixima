(kill(sm),sm(s) := smmatomax(s), kill(m),0);
0$

( simpproduct : true ,
  mixima_translate_arrays : ["z","d","dd","c"], 0);
0$

/************************************************************
 *    Translate the StrongDeco code
 */

(sm( "
(*  This code computes the expansion of well known strongly correlated states, Pfaffian, Laughlin, etc, 
in terms of the Fock states used in the many body calculations

Bruno Julia - Diaz, ICFO / U. Barcelona
Tobias Grass, ICFO
bjulia@gmail.com
tobias.grass@icfo.es
(2011)
Study of the decomposition of the Laughlin and Pfaffian states in Fock states
*)

(* Remove this.
<<Combinatorica`Permanents
*)

(* Don't use this, use the built in maxima version.
Permanent[m_List] := 
  With[{v = Array[x, Length[m]]}, Coefficient[Times @@ (m . v), Times @@ v]]
*)

(* This colon was missing on := *)
zzz[a_, b_] := a^b;

Perm[n_, q_] := 
  Module[{nn = n}, Permanent[Outer[zzz, Table[z[i], {i, 1, n}], 
     Table[q[[i]], {i, 1, n}]]]];

Slat[n_, q_] := 
  Module[{nn = n}, Det[Outer[zzz, Table[z[i], {i, 1, n}], 
     Table[q[[i]], {i, 1, n}]]]];


(*
Pots gives the basis, ordered as for Example, 
Post[5,4]={{0, 0, 0, 0, 4}, {0, 0, 0, 1, 3}, {0, 0, 0, 2, 2}, {0, 0, 1, 1, 2}, {0, 1, 1, 1, 1}}
Then, ConjS, gives the corresponding set of Permanents corresponding to the basis.
For  Bosons
*)

cc[0]=0;

(* modified tab to mtab *)
mtab[n_, l_] := Table[{cc[i], cc[i - 1], 
    If[i == 1, l, (l - Sum[cc[j], {j, 0, i - 1}])/2]}, {i, 1, n - 1}];

Pots[na_, L_] := 
  If[na == 2, Table[{i, L - i}, {i, 0, L/2}], 
   Module[{nna = na, nn = L}, Clear[pat]; 
     pat[nna] = 
      Join[Table[cc[i], {i, 1, nna - 1}], {nn - Sum[cc[i], {i, 1, nna - 1}]}];
      pat[a_] := Table[pat[a + 1], Evaluate[mtab[nna, L][[a]]]]; 
     Flatten[pat[1], nna - 2]]];

     
ConjS[na_, L_] := 
  Module[{nna = na, nn = L}, poty = Pots[nna, nn]; 
    dimy = Dimensions[poty][[1]]; Table[Perm[nna, poty[[i]]], {i, 1, dimy}]];

(*  For  Fermions *)

PotsF[na_, L_] := 
  Module[{nna = na, nn = L}, Complement[Table[If[NumberQ[ConjS2[nna, nn][[
        i]]], 0, Pots[nna, nn][[i]]], {i, 1, Dimensions[Pots[nna, nn]][[1]]}], {0}]];


ConjS2[na_, L_] := 
  Module[{nna = na, nn = L}, poty = Pots[nna, nn]; 
    dimy = Dimensions[poty][[1]]; Table[Slat[nna, poty[[i]]], {i, 1, dimy}]];

(*    
Important entangled states
Laughlin of n particles with filling factor 1/nu
*)

Laughlin[n_,nu_]:=Product[(z[i]-z[j])^(1/nu),{i,1,n},{j,i+1,n}];

(* The case of filling factor 1/2 *)

Laug[n_]:=Laughlin[n,1/2];

(*
Pfaffian state
*)

Pfaffian[nn_, ff_] := 
  If[EvenQ[nn], Module[{n = nn}, 
    listy = Table[i, {i, 1, n}]; ab = Permutations[listy]; 
     sigs = SignaturePermutation /@ Permutations[listy]; 
     toli = Sum[sigs[[i]]*Product[1/(z[ab[[i,j]]] - z[ab[[i,j + 1]]]), 
          {j, 1, n, 2}], {i, 1, Dimensions[sigs][[1]]}]/(2^(n/2)*(n/2)!); 
     aout = toli*Laughlin[n, ff]; Expand[Simplify[aout]]], 0];

(* Pfaffian from the conjecture explained for instance in N.K. Wilkin and J.M.F. Gunn, Phys. Rev. Lett. 84, 6 (2000). *)


Conje[nn_] := If[EvenQ[nn], Module[{n = nn}, 
    listy = Table[i, {i, 1, n}]; ab = Permutations[listy]; 
     sigs = SignaturePermutation /@ Permutations[listy]; 
     toli = Sum[(Laughlin[n/2, 1/2] /. 
           Table[z[jj] -> z[ab[[i,jj]]], {jj, 1, n/2}])*
         (Laughlin[n/2, 1/2] /. 
           Table[z[jj - n/2] -> z[ab[[i,jj]]], {jj, n/2, n}]), 
        {i, 1, Dimensions[sigs][[1]]}]/(2^(n/2)*(n/2)!); aout = toli; aout], 
   Module[{n = nn}, listy = Table[i, {i, 1, n}]; ab = Permutations[listy]; 
     sigs = SignaturePermutation /@ Permutations[listy]; 
     toli = Sum[(Laug[(n + 1)/2] /. 
           Table[z[jj] -> z[ab[[i,jj]]], {jj, 1, (n + 1)/2}])*
         (Laug[(n - 1)/2] /. 
           Table[z[jj - (n + 1)/2] -> z[ab[[i,jj]]], 
            {jj, (n + 1)/2 + 1, n}]), {i, 1, Dimensions[sigs][[1]]}]/
       (2^(n/2)*(n/2)!); aout = toli; aout]];

(*
Generalized Laughlin states : We build states of Laughlin - type, ie zero interaction energy, 
but with two (or four) units more of angular momentum . This is done by multiplying the Laug[n] 
by the permanents of L = 2
With two extra units.
*)

deltaL2[n_,i_]:= Laug[n] ConjS[n,2][[i]];

(* With four extra units *)

deltaL4[n_, i_] := Laug[n] ConjS[n,4][[i]];


(* Quasihole excitation (at position ξ and at origin)  *)


qh[n_,nu_,xi]:=Product[(xi-z[i]),{i,1,n}]Laughlin[n,nu];

quah[n_,nu_]:= qh[n,nu,0];

(* Quasiparticle excitation (Popp, Paredes, Cirac 2004) *)

qp[na_, nu_, xi] := 
  Module[{nn = na}, dd[i_] := xi*dd[i - 1] - D[dd[i - 1], z[i]]; 
    dd[0] = Laughlin[nn, nu]; dd[nn]];


quap[n_]:= qp[n,1/2,0];

deltaQP2[n_,i_]:= quap[n] ConjS[n,2][[i]];

(*  Edge excitation  *)

edge[n_]:=Laug[n]ConjS[n,1][[1]];

(*
Generalized Pfaffian states : We build states of pfaffian type
but with two (or four) units more of angular momentum . T
With two extra units
*)

deltaP2[n_,i_]:= Conje[n] ConjS[n,2][[i]];

(* With four extra units *)

deltaP4[n_, i_] := Conje[n] ConjS[n,4][[i]];

(*
Normalization coefficients in the permantens and determinants
We consider the Fock-Darwin states as the single particle wave functions, written as, 
Subscript[ϕ, l]=z^l/Sqrt[π l!] 1/λ^(l+1) e^-|z(|^2)/(2λ^2)
with λ=1
We need to now how many repeated terms there are in the permanents, this can be 
computed easily.   For the L = that of the nominal laughlin.

*)

nami[na_, L_] := 
  Module[{nna = na, nn = L}, potty = Pots[nna, nn]; 
    pp = Dimensions[potty][[1]]; 
    inde = Table[Complement[potty[[i]]], {i, 1, pp}]; 
    ta = Table[Table[Count[potty[[i]], inde[[i,j]]], 
       {j, 1, Dimensions[inde[[i]]][[1]]}], {i, 1, pp}]; 
    Table[Product[ta[[i,j]]!, {j, 1, Dimensions[ta[[i]]][[1]]}], {i, 1, pp}]];



(* Lets extract now the coefficients in front of the polynomia  to be able to identify correctly all the factors *)


tip[na_, L_] := 
  Module[{nna = na, nn = L}, potty = Pots[nna, nn]; nimy = nami[nna, nn]; 
    Table[Sqrt[nimy[[i]]]*Sqrt[Product[Pi*Gamma[potty[[i,jj]] + 1], 
        {jj, 1, nna}]], {i, 1, Dimensions[nimy][[1]]}]];


(*  Prefactor is always 1 for Slaters   *)

namiF[na_, L_] := 
  Module[{nna = na, nn = L}, potty = PotsF[nna, nn]; 
    pp = Dimensions[potty][[1]]; Table[1, {i, 1, pp}]];

(*  Lets extract now the coefficients in front of the polynomia  to be able to identify correctly all the factors   *)


tipF[na_, L_] := 
  Module[{nna = na, nn = L}, potty = PotsF[nna, nn]; nimy = namiF[nna, nn]; 
    Table[Sqrt[nimy[[i]]]*Sqrt[Product[Pi*Gamma[potty[[i,jj]] + 1], 
        {jj, 1, nna}]], {i, 1, Dimensions[nimy][[1]]}]];

        
(*
Decomposition of the interesting states (BOSONS)
Laughlin states for generic N 
*)

LaugDeco[na_] := 
  Module[{nna = na}, state = Laug[nna]; base = ConjS[nna, nna*(nna - 1)]; 
    symb = Table[z[i], {i, 1, nna}]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
    prf = laur[[1]]*tip[nna, nna*(nna - 1)]; outp = prf/Sqrt[prf . prf]; 
    {outp}];

(*
Examples :


LaugDeco[3]
LaugDeco[4]
LaugDeco[5]

*)

(* Alternative way: *)

(* Modified to localize i, becaue of bug in Product *)
DDecoLaug[na_] := 
  Module[{nna = na,i }, Lmin = nna*(nna - 1); Lmax = nna*(nna - 1); 
    state = Laug[nna]; base = 
     Flatten[Table[Pots[nna, i], {i, Lmin, Lmax}], 1]; 
    dim = Dimensions[base][[1]]; 
    factors = Flatten[Table[tip[nna, i], {i, Lmin, Lmax}], 1]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf/Sqrt[prf . prf]];


(* Edge Excitations *)
       
EdgeDeco[na_] := 
  Module[{nna = na}, state = edge[nna]; base = ConjS[nna, nna*(nna - 1) + 1]; 
    symb = Table[z[i], {i, 1, nna}]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
    prf = laur[[1]]*tip[nna, nna*(nna - 1) + 1]; outp = prf/Sqrt[prf . prf]; 
    N[outp]];

(*    
EdgeDeco[3]
EdgeDeco[4]    
*)

(*
Generalized Laughlin states for generic N (L=Llaug+2)
It gives the two states after orthogonalization (Gram Schmidt)
see \"Strongly correlated states of a cold atomic gas from geometric gauge fields\",
B. Julia-Diaz, D. Dagnino, KJ Gunter, T. Grass, N. Barberan, M. Lewenstein, J. Dalibard, http://arxiv.org/abs/1105.5021
*)

Laug2Deco[na_] := 
  Module[{nna = na}, base = ConjS[nna, nna*(nna - 1) + 2]; 
    symb = Table[z[ip], {ip, 1, nna}]; tipy = tip[nna, nna*(nna - 1) + 2]; 
    vec2 = Table[state = deltaL2[nna, ii]; 
       laur = PolynomialReduce[state, base, symb]; 
       If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
       prf = laur[[1]]*tipy; outp = prf/Sqrt[prf . prf]; N[outp], {ii, 1, 2}];
       Orthogonalize[vec2]];

(*       
Laug2Deco[3]
Laug2Deco[4]
Laug2Deco[5]
*)

(*
Generalized Laughlin states for generic N (L=Llaug+4)
It gives the four states after orthogonalization (Gram Schmidt)
*)

Laug4Deco[na_] := 
  Module[{nna = na}, base = ConjS[nna, nna*(nna - 1) + 4]; 
    symb = Table[z[ip], {ip, 1, nna}]; tipy = tip[nna, nna*(nna - 1) + 4]; 
    vec4 = Table[state = deltaL4[nna, ii]; 
       laur = PolynomialReduce[state, base, symb]; 
       If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
       prf = laur[[1]]*tipy; outp = prf/Sqrt[prf . prf]; N[outp], {ii, 1, 4}];
       Orthogonalize[vec4]];

(*       
Laug4Deco[3]
Laug4Deco[4]
*)

(*
Quasihole excitation
*)

QuasiHDeco[na_] := 
  Module[{nna = na}, base = ConjS[nna, nna*(nna - 1) + nna]; 
    symb = Table[z[ip], {ip, 1, nna}]; tipy = tip[nna, nna*(nna - 1) + nna]; 
    state = quah[nna, 1/2]; laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; prf = laur[[1]]*tipy; 
    outp = prf/Sqrt[prf . prf]; N[outp]];


(*    
QuasiHDeco[3]
QuasiHDeco[4]
QuasiHDeco[5]
*)    


DDecoQuah[na_] := 
  Module[{nna = na}, Lmax = nna*(nna - 1) + nna; Lmin = nna*(nna - 1) + nna; 
    state = quah[nna, 1/2]; base = 
     Flatten[Table[Pots[nna, i], {i, Lmin, Lmax}], 1]; 
    dim = Dimensions[base][[1]]; 
    factors = Flatten[Table[tip[nna, i], {i, Lmin, Lmax}], 1]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf/Sqrt[prf . prf]; N[outp]];

(*
DDecoQuah[3]
DDecoQuah[4]
Timing[DDecoQuah[5]]
*)

(*
Normalization of quasihole excitation as a function of the position ξ of the quasihole
*)

NormQh[na_] := Module[{nna = na}, 
   Lmax = nna*(nna - 1) + nna; Lmin = nna*(nna - 1); 
    state = qh[nna, 1/2, xi]; base = 
     Flatten[Table[Pots[nna, i], {i, Lmin, Lmax}], 1]; 
    dim = Dimensions[base][[1]]; 
    factors = Flatten[Table[tip[nna, i], {i, Lmin, Lmax}], 1]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf . prf];

(*       
   NormQh[4]    
*)

(*
Quasiparticle excitation
*)

QuasiPDeco[na_] := 
  Module[{nna = na}, base = ConjS[nna, nna*(nna - 1) - nna]; 
    symb = Table[z[ip], {ip, 1, nna}]; tipy = tip[nna, nna*(nna - 1) - nna]; 
    state = quap[nna]; laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; prf = laur[[1]]*tipy; 
    outp = prf/Sqrt[prf . prf]; N[outp]];

(*
Timing[QuasiPDeco[3]]
Timing[QuasiPDeco[4]]
Timing[QuasiPDeco[5]]
*)

DDecoQuap[na_] := 
  Module[{nna = na}, Lmax = nna*(nna - 1) - nna; Lmin = nna*(nna - 1) - nna; 
    state = quap[nna]; base = 
     Flatten[Table[Pots[nna, i], {i, Lmin, Lmax}], 1]; 
    dim = Dimensions[base][[1]]; 
    factors = Flatten[Table[tip[nna, i], {i, Lmin, Lmax}], 1]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf/Sqrt[prf . prf]; N[outp]];

(*       
Timing[SymDecoQuap[3]]
Timing[SymDecoQuap[4]]
Timing[SymDecoQuap[5]]
*)

QuasiP2Deco[na_] := 
  Module[{nna = na}, base = ConjS[nna, nna*(nna - 1) - nna + 2]; 
    symb = Table[z[ip], {ip, 1, nna}]; 
    tipy = tip[nna, nna*(nna - 1) - nna + 2]; 
    vec2 = Table[state = deltaQP2[nna, ii]; 
       laur = PolynomialReduce[state, base, symb]; 
       If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
       prf = laur[[1]]*tipy; outp = prf/Sqrt[prf . prf]; N[outp], {ii, 1, 2}]; Orthogonalize[vec2]];

       
(* QuasiP2Deco[5] *)

(* Pfaffian  *)


PfaffDeco[na_] := 
  Module[{nna = na}, base = 
     If[EvenQ[nna], ConjS[nna, (nna*(nna - 2))/2], ConjS[nna, (nna - 1)^2/2]];
     symb = Table[z[ip], {ip, 1, nna}]; 
    tipy = If[EvenQ[nna], tip[nna, (nna*(nna - 2))/2], 
      tip[nna, (nna - 1)^2/2]]; state = Pfaffian[nna, 1]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; prf = laur[[1]]*tipy; 
    outp = prf/Sqrt[prf . prf]; outp];



ConjeDeco[na_] := 
  Module[{nna = na}, base = 
     If[EvenQ[nna], ConjS[nna, (nna*(nna - 2))/2], ConjS[nna, (nna - 1)^2/2]];
     symb = Table[z[ip], {ip, 1, nna}]; 
    tipy = If[EvenQ[nna], tip[nna, (nna*(nna - 2))/2], 
      tip[nna, (nna - 1)^2/2]]; state = Conje[nna]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; prf = laur[[1]]*tipy; 
    outp = prf/Sqrt[prf . prf]; outp];

(*    
ConjeDeco[3]
ConjeDeco[4]
Timing[ConjeDeco[5]]
*)

DDecoConje[na_] := 
  Module[{nna = na}, Lmax = If[EvenQ[nna], (nna*(nna - 2))/2, (nna - 1)^2/2]; 
    Lmin = Lmax; state = Conje[nna]; 
    base = Flatten[Table[Pots[nna, i], {i, Lmin, Lmax}], 1]; 
    dim = Dimensions[base][[1]]; 
    factors = Flatten[Table[tip[nna, i], {i, Lmin, Lmax}], 1]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf/Sqrt[prf . prf]];

(*
SymDecoConje[3]
SymDecoConje[4]
Timing[SymDecoConje[5]]
*)

Pfaff2Deco[na_] := 
  Module[{nna = na}, base = 
     If[EvenQ[nna], ConjS[nna, (nna*(nna - 2))/2 + 2], 
      ConjS[nna, (nna - 1)^2/2 + 2]]; symb = Table[z[ip], {ip, 1, nna}]; 
    tipy = If[EvenQ[nna], tip[nna, (nna*(nna - 2))/2 + 2], 
      tip[nna, (nna - 1)^2/2 + 2]]; 
    vec2 = Table[state = deltaP2[nna, ii]; 
       laur = PolynomialReduce[state, base, symb]; 
       If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
       prf = laur[[1]]*tipy; outp = prf/Sqrt[prf . prf]; N[outp], {ii, 1, 2}];
       Orthogonalize[vec2]];

(*
Pfaff2Deco[5]
*)


(*
Decomposition of the interesting states (FERMIONS)
Laughlin states for generic N
*)

LaugDecoF[na_, nu_] := 
  Module[{nna = na}, state = Laughlin[nna, nu]; 
    base = ConjSF[nna, (nna*(nna - 1))/(nu*2)]; 
    symb = Table[z[i], {i, 1, nna}]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; 
    prf = laur[[1]]*tipF[nna, (nna*(nna - 1))/(2*nu)]; 
    outp = prf/Sqrt[prf . prf]; outp];

(*    
LaugDecoF[2,1/3]
LaugDecoF[3,1/3]
Timing[LaugDecoF[4,1/3]]
*)

DDecoLaugF[na_, nu_] := 
  Module[{nna = na}, L = (nna*(nna - 1))/(nu*2); state = Laughlin[nna, nu]; 
    base = PotsF[nna, L]; dim = Dimensions[base][[1]]; 
    factors = tipF[nna, L]; d[0] = state; 
    prf = Table[For[i = 1, i < nna + 1, i++, 
        d[nna] = 0; d[i] = D[d[i - 1], {z[i], base[[j,i]]}]; 
         d[i] = d[i] /. z[i] -> 0; If[d[i] == 0, Break[]]]; 
       d[nna]/factors[[j]], {j, 1, dim}]; outp = prf/Sqrt[prf . prf]];

(*       
DDecoLaugF[2,1/3]
DDecoLaugF[3,1/3]
Timing[DDecoLaugF[4,1/3]]
*)

(*
Quasihole excitation
*)

QuasiHDecoF[na_, nu_] := 
  Module[{nna = na}, base = ConjSF[nna, (nna*(nna - 1))/(2*nu) + nna]; 
    symb = Table[z[ip], {ip, 1, nna}]; 
    tipy = tipF[nna, (nna*(nna - 1))/(2*nu) + nna]; state = quah[nna, 1/2]; 
    laur = PolynomialReduce[state, base, symb]; 
    If[laur[[2]] != 0, Print[\"Problem in reduction\"]]; prf = laur[[1]]*tipy; 
    outp = prf/Sqrt[prf . prf]; N[outp]];

(*
QuasiHDecoF[3,1/2]
QuasiHDecoF[4,1/2]  
*)

"), 0);

0$

/************************************************************
 *    Modify some of the translations by hand
 */
 
/* These functions are the translations, further modified by hand */
/* mtab:  cc(i) --> cc[i] */
/* Pots: evaluation of Table changed */
/* DDecoLaug: only replace d() --> d[]  */
(
  mtab(n,l):=Table([cc[i],cc[i-1],If(i = 1,l,(l-Sum(cc[j],[j,0,i-1]))*1/2)],
     [i,1,n-1]),
   
  Pots(na,L):=if na = 2 then Table([i,L-i],[i,0,Times(L,1/2)])
      else block([res],
                 ( Clear(pat),
                   pat[na]:Join(Table(cc[i],[i,1,na-1]),
                     [L-Sum(cc[i],[i,1,na-1])]),
                     pat[a] :=  'Table(pat[1+a],(inpart(mtab(na,L),a))),
                     res : ev(pat[1]),
                     res : ev(res,nouns),
                   Flatten(res,na-2))),
0);
0$
               
/* not necessary to change this anymore
(DDecoLaug(na):=Module([nna => na,i],
                 (Lmin => nna*(nna-1),Lmax => nna*(nna-1),state => Laug(nna),
                  base => Flatten(Table(Pots(nna,i),[i,Lmin,Lmax]),1),
                  dim => Part(Dimensions(base),1),
                  factors => Flatten(Table(tip(nna,i),[i,Lmin,Lmax]),1),
                  d[0] => state,
                  prf => Table((For(i => 1,i < nna+1,Increment(i),
                                    (d[nna] => 0,
                                     d[i] => D(d[i-1],[z(i),Part(base,j,i)]),
                                     d[i] => ReplaceAll(d[i],Rule(z(i),0)),
                                     If(d[i] = 0,Break()))),
                                d[nna]*Part(factors,j)^-1),[j,1,dim]),
                  outp => prf*Sqrt(Dot(prf,prf))^-1)), 0);
0$

*/

/************************************************************
 *    Test the translated code.
 */

/* rootscontract gives the same form that Mma does */
rootscontract(LaugDeco(3));
[[0,0,2/sqrt(22),-3/sqrt(33),-sqrt(2)/sqrt(11),2/sqrt(22),
         -sqrt(2)/sqrt(11)]]$
         

rootscontract(LaugDeco(4));
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2*sqrt(15)/sqrt(1106),-10/sqrt(1106),
         -3*sqrt(5)/sqrt(553),2*sqrt(15)/sqrt(553),-12/sqrt(1106),0,0,0,
         -sqrt(30)/sqrt(553),10/sqrt(1106),0,2*sqrt(15)/sqrt(1106),
         -2*sqrt(5)/sqrt(553),-sqrt(30)/sqrt(553),6^(3/2)/(3*sqrt(553)),
         -sqrt(30)/sqrt(553),2*sqrt(5)/sqrt(553),4/sqrt(1106),
         -3^(3/2)/sqrt(553),3^(3/2)/sqrt(553)]]$


/* grobner should be compiled for this ! */

/* reenable when we find a way to have grobner easily compiled 
rootscontract(LaugDeco(5));
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10*sqrt(6)/sqrt(42815),
         -35*sqrt(6)/sqrt(299705),-5*2^(3/2)/sqrt(8563),10*sqrt(3)/sqrt(8563),
         -10*3^(3/2)/sqrt(59941),0,0,0,-30/sqrt(42815),105/sqrt(299705),0,
         20*sqrt(3)/sqrt(42815),-30/sqrt(42815),-10*sqrt(3)/sqrt(8563),
         15*2^(3/2)/sqrt(59941),-3*2^(5/2)/sqrt(8563),20*sqrt(3)/sqrt(42815),
         60/sqrt(299705),-10*3^(3/2)/sqrt(59941),25*6^(3/2)/(3*sqrt(299705)),
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10*sqrt(6)/sqrt(42815),
         35*sqrt(6)/sqrt(299705),5*2^(3/2)/sqrt(8563),-10*sqrt(3)/sqrt(8563),
         10*3^(3/2)/sqrt(59941),0,0,0,0,0,0,0,0,0,10*sqrt(6)/sqrt(42815),
         -35*sqrt(6)/sqrt(299705),0,-20/sqrt(42815),10*sqrt(3)/sqrt(42815),
         10/sqrt(8563),-5*6^(3/2)/(3*sqrt(59941)),0,0,-10*sqrt(6)/sqrt(42815),
         15*sqrt(2)/sqrt(42815),4*sqrt(6)/sqrt(8563),0,
         -15*2^(5/2)/sqrt(299705),10*sqrt(3)/sqrt(59941),-12/sqrt(8563),
         40*sqrt(3)/sqrt(299705),-5*6^(3/2)/(3*sqrt(59941)),0,0,0,0,
         -5*6^(3/2)/(3*sqrt(42815)),35*sqrt(6)/sqrt(299705),0,0,
         20/sqrt(42815),-10*sqrt(3)/sqrt(42815),2^(5/2)/sqrt(8563),
         -5*2^(5/2)/sqrt(42815),5*6^(5/2)/(9*sqrt(299705)),10/sqrt(59941),0,
         -2*3^(3/2)/sqrt(8563),5*sqrt(6)/sqrt(42815),15*sqrt(2)/sqrt(299705),
         4*sqrt(6)/sqrt(8563),-10*sqrt(3)/sqrt(299705),
         -10*sqrt(3)/sqrt(59941),-9*2^(3/2)/sqrt(59941),
         15*2^(3/2)/sqrt(299705),2*3^(3/2)/sqrt(8563),-6^(3/2)/(2*sqrt(8563)),
         -5*6^(3/2)/(2*sqrt(299705)),18/sqrt(59941),
         5*6^(3/2)/(2*sqrt(299705)),-24/sqrt(59941),24/sqrt(59941)]]$

*/

/* DDecoLaug is slow in translation. Only do n=3 */
ratsimp(DDecoLaug(3)-part(LaugDeco(3),1));
[0,0,0,0,0,0,0]$

/* On the next two, the output was copied from the Mma notebook */
Chop(EdgeDeco(3) - [0.,0.,0.550482,-0.426401,-0.550482,0.246183,0.301511,-0.246183], 1e-6);
[0,0,0,0,0,0,0,0]$

Chop(EdgeDeco(4) - [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
  0.308118,-0.260407,-0.377366,0.201711,0.260407,-0.232915,0.,0.,
  0.,-0.308118,0.260407,0.,0.308118,-0.116458,-0.150346,-0.142631,
  0.,0.180415,-0.308118,0.116458,0.190175,-0.082348,-0.147309,0.110481],1e-6);
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0]$

/* One problem is the translated  case is wrong. It also does not give the correct answer.
  PolynomialReduce gives a different answer than Mma,.. don't know why

Laug2DECO(3)
Laug4DECO(3)
*/

Chop(
   QuasiHDeco(3) -
   [0.,0.,0.,0.,0.,0.,0.,-0.369274,0.467099,0.426401,-0.467099,0.495434],
   1e-6);
[0,0,0,0,0,0,0,0,0,0,0,0]$

Chop(
   QuasiHDeco(4) -
   [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.191862,
   -0.251207,-0.242689,0.290068,-0.324306,0.,0.,0.,-0.221543,0.290068,
   0.,0.242689,-0.205109,-0.259445,0.23684,-0.25741,0.224686,0.145034,-0.275183,0.284208],
   1e-6);
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]$

/*
Chop(
   QuasiHDeco(5) -
   [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
   0.,-0.0940742,0.125432,0.123172,-0.153623,0.175997,0.,0.,0.,0.118996,-0.158661,0.,-0.142227,
   0.125432,0.164229,-0.153623,0.159014,-0.14992,-0.099163,0.194752,-0.208199,0.,0.,0.,0.,0.,0.,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.108628,-0.144837,-0.142227,0.177388,-0.203224,
   0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.118996,0.158661,0.,0.10057,-0.088694,-0.116128,0.108628,0.,0.,
   0.127212,-0.11219,-0.116128,0.,0.177388,-0.0821147,0.14992,-0.14992,0.120204,0.,0.,0.,0.,
   0.126214,-0.168285,0.,0.,-0.110168,0.0971595,-0.0711134,0.164229,-0.108628,-0.0502848,0.,
   0.134928,-0.0734457,-0.0485797,-0.134093,0.0410574,0.0931094,0.137711,-0.104099,-0.139353,
   0.103868,0.0899522,-0.10057,-0.0931094,0.138799,-0.141661],
    1e-6);

[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]$

*/

/* replace d() -> d[]
  Also put i in local arg list !
  Not neccessary anymore to change d() -> d[] by hand.
*/
/*
( DDecoQuah(na):=Module([nna => na,i],
                 (Lmax => nna*(nna-1)+nna,Lmin => nna*(nna-1)+nna,
                  state => quah(nna,1/2),
                  base => Flatten(Table(Pots(nna,i),[i,Lmin,Lmax]),1),
                  dim => Part(Dimensions(base),1),
                  factors => Flatten(Table(tip(nna,i),[i,Lmin,Lmax]),1),
                  d[0] => state,
                  prf => Table((For(i => 1,i < nna+1,Increment(i),
                                    (d[nna] => 0,
                                     d[i] => D(d[i-1],[z(i),Part(base,j,i)]),
                                     d[i] => ReplaceAll(d[i],Rule(z(i),0)),
                                     If(d[i] = 0,Break()))),
                                d[nna]*Part(factors,j)^-1),[j,1,dim]),
                  outp => prf*Sqrt(Dot(prf,prf))^-1,N(outp))),
              0);

0$
*/

Chop(DDecoQuah(3)-
   [0.,0.,0.,0.,0.,0.,0.,-0.369274,0.467099,0.426401,-0.467099,0.495434],
   1e-6);
[0,0,0,0,0,0,0,0,0,0,0,0]$

/* this is very slow.
DDecoQuah(4)
*/

/* broken
QuasiPDeco(3);
*/


/* d() --> d[]. But still causes error.
( DDecoQuap(na):=Module([nna => na],
                (Lmax => nna*(nna-1)-nna,Lmin => nna*(nna-1)-nna,
                 state => quap(nna),
                 base => Flatten(Table(Pots(nna,i),[i,Lmin,Lmax]),1),
                 dim => Part(Dimensions(base),1),
                 factors => Flatten(Table(tip(nna,i),[i,Lmin,Lmax]),1),
                 d[0] => state,
                 prf => Table((For(i => 1,i < nna+1,Increment(i),
                                   (d[nna] => 0,
                                    d[i] => D(d[i-1],[z(i),Part(base,j,i)]),
                                    d[i] => ReplaceAll(d[i],Rule(z(i),0)),
                                    If(d[i] = 0,Break()))),
                               d[nna]*Part(factors,j)^-1),[j,1,dim]),
                 outp => prf*Sqrt(Dot(prf,prf))^-1,N(outp))),
             0);
0$           
*/

/* Error in SETQ [or a callee]: Bind stack overflow
QuasiP2Deco(3)
*/

/* wrong, but looks close. why ...
ConjeDeco(3);
*/

/* Needs d() -> d[] at least
DDecoConje
*/

/* fails
Pfaff2Deco(3)
LaugDecoF(2,1/3)

segfault
QuasiHDecoF(3,1/2)
*/

/* Try to kill some fraction of the non-local symbols */

/*
(simpproduct:false,
 kill(zzz,Perm,Slat,cc,Pots,ConjS,ConjS2,Laughlin,Laug,Pfaffian,Conje,deltaL2,deltaL4,
  qh, quah, qp, quap, deltaQP2,edge,deltaP2,deltaP4,nami,tip,namiF,tipF,LaugDeco,DDecoLaug,
  EdgeDeco,Laug2Deco,Laug2DECO,Laug4Deco,Laug4DECO,QuasiHDeco,DDecoQuah,NormQh,QuasiPDeco,DDecoQuap,QuasiP2Deco,
  PfaffDeco,ConjeDeco,DDecoConje,Pfaff2Deco,Pfaff2DECO,DDecoLaugF,QuasiHDecoF,
  mtab,Pots,DDecoLaug),
 kill(pat,i,na,nna,L,res,Lmin,Lmax,state,base,dim,factors,tip,d,z,prf,outp,poty,
  dimy,listy,sigs,ab,toli,aout,dd,pp,ta,nimy,potty,laur,tipy));
done$
*/

(mixima_translate_arrays : [], 0);
0$
