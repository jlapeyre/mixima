/********************************************************
   Mathematica compatibility functions.
   VERSION VERSIONNUMBER

   Auxiallary functions that may be useful are marked with
                                /*> Aux function auxfunctionname */
   Global variables are marked with
                         /* Global variable chopEpsilon */


  This file is the descendant of the original single-file distribution of
  the compatibility functions. I am moving things out of here.. slowly.
  

********************************************************/

/*> Function Apply */
Apply(f,e) := apply(f,args(e));

/*> Function ArcTan */
ArcTan([z]) := if length(z) = 1 then atan(z[1]) else atan2(z[2],z[1]);

/*#######> Function ArrayDepth */
/*ArrayDepth(m) := length(Dimensions(m));*/

/* Probably not very efficient */
/*> Function Coefficient */
Coefficient([e]) := block([%%QQ%%],if length(e) =2 then
   apply('coeff, [expand(ratsubst(%%QQ%%,second(e),expand(first(e)))),%%QQ%%])
   else apply('coeff, [expand(ratsubst(%%QQ%%,second(e),expand(first(e)))),%%QQ%%,third(e)]));

/*> Function Chop */
/* Remove tellsimp stuff again. There are probably no useful
 * situations where chop(arg) should remain unevaluated.
 * This also is based on contribution from Stavros Macrakis.
 */
/*> GlobalVariable chopEpsilon */
chopEpsilon : 1e-10;

/* This one works, but is a bit more complicated */
Chop(ex,[arg]) :=  block( [eps:chopEpsilon],
  if length(arg) = 1 then eps:arg[1],
  if numberp(ex) and abs(ex) < eps then 0
  elseif mapatom(ex) then ex
  else map(lambda([x],Chop(x,eps)),ex));

/* There should be a function for this. Being stuck with
  special syntax is a drag */
Factorial2(e) := (e)!!;

/*> Function Fold */
/*> Function FoldList */
block ([simp : false],
    local (aa,bb,cc,dd),
    matchdeclare ( [aa,bb], all, cc , lambda([x], not atom(x)),
       dd, numberp ),
    tellsimp( Fold(aa,bb,cc), mixima_dofold(aa,bb,cc)),
    tellsimp( Fold(aa,bb,dd), throw("fold: third argument must be a list")),
    tellsimp( FoldList(aa,bb,cc), mixima_dofoldlist(aa,bb,cc)));

/***   fold(f,x,[a,b,c]) --> f(f(f(x,a),b),c)
*/

/* Using (+f) works here when applying some functions,
   but fails with some, as in applying "[". So below
   we use f%%% and hope that works, although it is not
   a clean bulletproof solution. The problem with "["
   is an error 'symbol' that arises when using the simplifier
   as above.
   */

/*============== Fold  ===============*/
/* this seems best */
mixima_dofold(f%%%,x%%%,v) := block([res,a],
  if length(v) = 0 then return(x%%%),
  res: apply(f%%%,[x%%%,mixpart(v,1)]),
  for a in rest(v,1) do
  res:apply(f%%%,[res,a]),res);

/*============== FoldList  ===============*/
/*** foldlist. same as Mma FoldList, ie,
  foldlist(f,x,[a,b,c]) --> [x, f(x,a), f(f(x,a),b), f(f(f(x,a),b),c)]
 This should  be rewritten to avoid recursion  and endcons, both of which
 seriously degrade performance.
*/
mixima_dofoldlist(f%%,x,v) := block( [e],
		 if length(v)=0 then [x]
	         else ( e : mixima_dofoldlist(f%%,x,rest(v,-1)),
	         endcons(apply('f%%,[last(e),last(v)]),e)));


/************** end Fold FoldList  **************/

/*> Function FourierTransform */
FourierTransform(expr,x,t) := block([],
  (1/sqrt(2*%pi))*integrate(expr*exp(%i*t*x),x,'minf,'inf));

/*> Function FromDigits */
FromDigits(v,[ib]) := block([s:0,b:10,i,m],
  if length(ib)>0 then b:ib[1],
  m:length(v),
  for i thru m do
      s : s + v[m-i+1]*b^(i-1),
      s);


/*> Function Grid */
/* Crude implementation of Grid.
  Formats a list of lists (ie, matrix) as a table of strings with
  uniform spacing enough to accomodate largest element. No other
  arguments or adjustments are possible. String format is whatever
   lisp ~a does with an expression.
  Probably hard to write an rtest because this prints. */
Grid(m) := block([i,j,maxlen:0,nlen,lflag:false],
    for i:1 thru length(m) do if not(listp(m[i])) then lflag:true,
    if lflag then m:Map("[",m),
    for i:1 thru length(m) do
    (for j:1 thru length(m[i]) do(
      nlen:slength(printf(false,"~a",m[i][j])),
       if nlen > maxlen then maxlen : nlen)),
       printf(true,sconcat("~{~{~",maxlen+1,"a ~}~%~}"),m),
       m);

/*> Function Head */
/* This returns false if we don't know what the head is.
 Perhaphs we should make translations: "[" --> List */
/* I should probably use ratnump somehow */
Head(expr) := if numberp(expr) then (
  if integerp(expr) then 'Integer
  elseif bfloatp(expr) then if MiximaHeadStrict then 'Real
       else 'BFloat
       elseif floatnump(expr) then 'Real
       elseif (not atom(expr)) and op(expr) = "/" then 'Rational
       else (print("Don't know Head of ",expr),false))
     elseif complexp(expr) then 'Complex
     elseif stringp(expr) then 'String
     elseif symbolp(expr) then 'Symbol
     elseif (not atom(expr)) then op(expr)
     else (print("Don't know Head of ",expr),false);

/*> Function HypergeometridPFQ */
HypergeometricPFQ([e]) := block([res],
  res : apply('hypergeometric, e),
  if Head(res) = 'hypergeometric
  then apply('hgfred, e)
  else res);

/*============== IntegerDigits  ===============*/
/***
   IntegerDigits(n) returns list of digits in integer n
   IntegerDigits(n,b) returned digits are in base b
   IntegerDigits(n,b,pad) leading zeros appended so list
            is of total length pad.
*/

/*> Function IntegerDigits */
block ([simp : false],
    local (aa,bb,cc,dd,ee),
    matchdeclare ([aa,bb], numberp, cc, listp,
      dd, lambda([x], not listp(x)), ee, all ),
    tellsimp (IntegerDigits(aa), nIntegerDigits(aa) ),
    tellsimp (IntegerDigits(aa,bb), nIntegerDigits(aa,bb) ),
    tellsimp (IntegerDigits(aa,bb,ee), nIntegerDigits(aa,bb,ee) ),
    tellsimp (IntegerDigits(cc), map(IntegerDigits,cc) ),
    tellsimp (IntegerDigits(cc,dd), map(lambda([x],IntegerDigits(x,dd)),cc)),
    tellsimp (IntegerDigits(dd,cc), map(lambda([x],IntegerDigits(dd,x)),cc)),
    tellsimp (IntegerDigits(cc,dd,ee), map(lambda([x],IntegerDigits(x,dd,ee)),cc)),
    tellsimp (IntegerDigits(dd,cc,ee), map(lambda([x],IntegerDigits(dd,x,ee)),cc))    
    );

nIntegerDigits(n,[ib]) := block([m,r:[],b:10,pad:1,diff,res],
   n : abs(n),
   if length(ib)>0 then b:ib[1],
   if length(ib)>1 then pad:ib[2],
/*   if listp(n) then 
    return(map(lambda([x], IntegerDigits(x,b,pad)),n))
   else if listp(b) then
    return(map(lambda([x], IntegerDigits(n,x,pad)),b)),*/
   if n = 0 then return(Table(0,[pad])),
   while  n > 0 do (
    m : floor(n/b),
    r:cons( n-m*b, r),
    n:m),
   diff : pad-length(r),
   if diff > 0 then r:append(create_list(0,i,1,diff),r),
  r);

/************** end IntegerDigits  **************/

/*> Function IntegerExponent */
/* This is probably the slowest algorithm one can find for the problem */
IntegerExponent(n,[args]) := block([base:10,facs,ans:0, arbitrary_max : 100000],
       if length(args) = 1 then base:args[1],
       while ans<arbitrary_max do (
        if  mod(n,base^ans) > 0  then return(), ans : ans + 1),
	if ans = arbitrary_max then (Print("IntegerExponent: cheap algorithm failed."),
          return(nil)),
        ans -1 );


/*> Function Log */
/* This is minimal to get some needed functionality */
Log([args]) :=  if length(args) = 1 then
       log(mixpart(args,1)) elseif
         floatnump(mixpart(args,2)) then log(mixpart(args,2))/float(log(mixpart(args,1)))
            else radcan(log(mixpart(args,2))/log(mixpart(args,1)));

/*> Function Max  */
Max([x]) := apply('max, flatten(x));

/*> Function Min  */
Min([x]) := apply('min, flatten(x));


/*> Function N */
block ([simp : false],
    local (cc,dd,ee),
    matchdeclare (cc, listp,
      dd, lambda([x], not listp(x)), ee, all ),
    tellsimp (N(dd), %mixima_in_N(dd)),
    tellsimp (N(dd,ee), %mixima_in_N(dd,ee)),
    tellsimp (N(cc,ee), map(lambda([x],%mixima_in_N(x,ee)),cc)),
    tellsimp (N(cc), map(lambda([x],%mixima_in_N(x)),cc)));
    

%mixima_in_N(x,[z]) := block([n, save_prec, ans],
	 if floatnump(x) then return(x),
	 if length(z) = 0 then
         if (floatnump(x) or bfloatp(x)) then return(x)
         elseif ( (Re(bfloat(x)) < 1.79621036478873b308)
           and (Im(bfloat(x)) < 1.79621036478873b308))
         then return(float(x))
         else return(bfloat(x)),
	 n : z[1],
         if n>16 then (
           save_prec : fpprec,
           fpprec : n,
           ans : bfloat(x),
           fpprec : save_prec,
           return(ans)),
         if ( (Re(bfloat(x)) < 1.79621036478873b308)
           and (Im(bfloat(x)) < 1.79621036478873b308))
         then return(float(x))
         else return(bfloat(x)));

/* Probably Re and Im should be defined elsewhere; not sure where.
 * Also, I wonder if these should be simplifying functions.
 */

Re(x) := realpart(x);

Im(x) := imagpart(x);

/*> Function Np */
/*
  Call N() and actually print the full precision.
  eg N(Pi,100) returns a number with 100 digits of
  precision, but only prints according to fpprintpred.
  Np(Pi,100) will print the 100 digits.
  
  In Mma N() changes the output printing precision for
  just that invocation. I don't know how to do this without
  getting into the maxima evaluation loop, which is maybe a
  good idea. This is a crude workaround 
*/
Np([e]) := block([ save_fpprintprec, ans],
         ans : apply('N,e),
         save_fpprintprec : fpprintprec,
         if length(e) > 1 then
           fpprintprec : e[length(e)],
         print(ans),
         fpprintprec : save_fpprintprec,
         ans);

/*> Function Nest */
/*> Function NestList */
/************ Nest and NestList  **************/
block ([simp : false],
    local (aa,bb,cc),
    matchdeclare ( aa, integerp, [bb,cc], all),
    tellsimp( Nest(bb,cc,aa), nnest(bb,cc,aa)),
    tellsimp( NestList(bb,cc,aa), nnestlist(bb,cc,aa))
    );

/* Can't quote f in arg list, becase interaction with
 tellsimp causes infinite recursion loop.
 Quoting f in apply calls will not stop global f from
 being used. It does seem that using (+f) does work.
*/
/* So this one will fail if f is defined globally
nnest(f,x,n) := block([i,res:apply('f,[x])],
  for i:2 thru n do res:apply('f,[res]),res);
*/
/* this works, but Stavros Macrakis says the compiler won't
 * recognize (+f)
 */
/* fails for operators like "+" when using simplifier
nnest(f,x,n) := block([i,res:(+f)(x)],
  for i:2 thru n do res:(+f)(res),res);
 */

/* This one is best */
nnest(f%%%,x,n) := block([i,res:apply(f%%%,[x])],
  for i:2 thru n do res:apply(f%%%,[res]),res);

/* don't quote arg or simplifier will choke. */
nnestlist(f,x,n) := block([i,list,res:x],
  list:[res],
  for i:1 thru n do (
    res:(+f)(res), list:cons(res,list) ), reverse(list));

/************** end Nest and Nestlist  **************/


/* very problematic. This is an operator, not a function.
  can't use alias. can't use apply. I guess I could make
  a new operator.
 */
/*> Function Not */
Not(e) := not(e);


/*> Function Prime */
/* horrible bad slow implementation of Prime */
Prime(n) := block([i:n, p:2],
              while i > 1 do (i : i - 1, p : next_prime(p)),
             return(p));

mixima_prev_prime(n) :=
     if n>-2 and n<=2 then -2
     elseif n>0 then prev_prime(n)
     else -next_prime(-n);

mixima_next_prime(n) :=
    if n<-2 then -prev_prime(-n)
    else next_prime(n);

/*> Function NextPrime */
NextPrime(n,[rest]) := block([k:false,i,res:false],
  if length(rest) # 0 then k:rest[1],
  if ( k=false or k>0) then n:floor(n) else n:ceiling(n),
  if  k = false then
    mixima_next_prime(n)
  else (
    if k>=0 then
    (res:n, for i:0 while i<k do (
        res : mixima_next_prime(res)))
    else (res:n, for i:0 while i<-k do (
        res : mixima_prev_prime(res))),res));

/*> Function Random */
/* needs to be handled more rationally. Maybe write it in lisp with a hash
 table to look for the names of distributions. For now
  Random() -> random(1.0)
  Random(NormalDistribution()) -> random_normal(0,1)
  Random(NormalDistribution(m,s)) -> random_normal(m,s)
*/
Random([args]) := block([len:length(args),dargs],
	       if len = 0 then random(1.0)
	       elseif len = 1 then if mapatom(args[1]) then nil /* not handled */
                  elseif op(args[1]) = 'NormalDistribution then
                      (dargs:args(args[1]), if length(dargs) = 0 then dargs:[0,1],
                     apply('random_normal, dargs)));


/*> Function RandomArray */
/* only does RandomArray(NormalDistribution(0,1),10) and
   RandomArray(NormalDistribution(),10)  */
RandomArray([args]) := block([len:length(args)],
              if len = 2 then
              if op(args[1]) = 'NormalDistribution then
                (dargs:args(args[1]), if length(dargs) = 0 then dargs:[0,1],
                  apply('random_normal, endcons(args[2],dargs))));



/*> Function Sinc */
Sinc(x)  := if x = 0 then 1 else sin(x)/x;

/*> Function StringJoin */
StringJoin([e]) := block([s:flatten([e])],
		apply('sconcat,s));

/*> Function TableForm */
TableForm(m) := block([i,j,maxlen:0,nlen,lflag:false],
    for i:1 thru length(m) do if not(listp(m[i])) then lflag:true,
    if lflag then m:Map("[",m),
    for i:1 thru length(m) do
    (for j:1 thru length(m[i]) do(
      nlen:slength(printf(false,"~a",m[i][j])),
       if nlen > maxlen then maxlen : nlen)),
       printf(false,StringJoin("~{~{~",maxlen+1,"a ~}~%~}"),m));

/*> Function TensorRank */
/* Superceded since Mma 5.0 by ArrayDepth, which has exactly the following definition */
TensorRank(m) := length(Dimensions(m));

/*> Function ToExpression */
ToExpression(x) :=
 if listp(x) then map('eval_string, x) else
  eval_string(x);

/*> Function TrigReduce  */
TrigReduce([e]) := ratsimp(apply('trigreduce,e));

/*> Function Permutations */
Permutations([e]) := apply(mmasetfunc2,cons('permutations,e));

/***********************************************************************************
 * Auxilliary functions
 */

mmasetfunc(f%%%,[e]) :=  block( [u],
  u:apply(f%%%,map(lambda([x],if setp(x) then x else setify(args(x))) ,e)),
  if setp(first(e)) then u elseif listp(first(e)) then listify(u) else
       apply(op(first(e)),listify(u)));

/* This one does not convert lists to sets on the way in.
   This is for Permuations to work.
*/
mmasetfunc2(f%%%,[e]) :=  block( [u],
  u:apply(f%%%,e),
  if setp(first(e)) then u elseif listp(first(e)) then listify(u) else
       apply(op(first(e)),listify(u)));


/**********************************************************
 * Following are not Mma functions, but rather helper functions.
 **********************************************************/

mixima_minus_inf_to_minf(x) :=  subst(minf,-inf,x);

