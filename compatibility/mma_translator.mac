/*> Function Out */
Out(n) := block(
  if n > 0 then
     eval_string(ToString("%o",n))
  else
     eval_string(ToString("%o",linenum-n)));

/*> Function In */
In(n) := eval_string(ToString("%i",n));

/*> Function InString */
InString(n) := eval_string(ToString("%is",n));

/*> Function mInString */
mInString(n) := eval_string(ToString("%mis",n));


/*

 Enter the mock mma shell. An error in maxima evaluation
 always exits back the maxima top level. There is probably
 a way to catch this. But I allow the return to toplevel
 on an error, but then immediately enter the shell again.
 If errcatch reports no error, then the user typed 'Exit',
 so we exit. If an infinite loop of errors occurs for some
 reason, catch this and offer to quit.
 Finally, there is some bug I can't find that makes the mma-parser,
 which read characters from the input streat, find some input the first
 time in that returns NULL. But on subsequent entries it is not there.
 So detect this with entrycount and ignore that first input.

 Note, I hope these errors are now greatly reduced.
 In fact, set   max_allowed_errs : 0.

 Having the errcatch here makes debugging much more difficult.
 
 Hmm.. looks like parser errors are not caught by errcatch. So
 the loop below would be useful still.

*/
tomma([opts]) := block([entrycount : 0],
   entermma(entrycount));

/*
tomma([opts]) := block([res, nerrs : 0, lres, ans, entrycount : 0,
  max_allowed_errs : 0 ],
  do( res : errcatch(entermma(entrycount)),
    entrycount : entrycount + 1,
    lres:length(res),
    if lres = 0 then nerrs : nerrs +1,
    if lres > 0 then return(part(res,1))
    elseif nerrs > max_allowed_errs then
      if not ( ToString(read("Too many mma errors. Continue (y/n) ?"))
         = "y" ) then return(false)
         else nerrs:0));
*/

/*
* For catching errors within mockmma shell.
* I was having trouble catchin errors from within the shell.
*/
mixerrcatch_eval_string(s) :=  block([res],
  res : errcatch( eval_string(s)));
